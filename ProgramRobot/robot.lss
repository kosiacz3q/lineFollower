
robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000054a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  0000054a  000005de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800074  00800074  000005f2  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000005f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000c1  00000000  00000000  00000612  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000272  00000000  00000000  000006d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000121  00000000  00000000  00000945  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000254  00000000  00000000  00000a66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00000cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000014a  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000098  00000000  00000000  00000e96  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e4       	ldi	r30, 0x4A	; 74
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a4 37       	cpi	r26, 0x74	; 116
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a4 e7       	ldi	r26, 0x74	; 116
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 37       	cpi	r26, 0x76	; 118
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	b6 d0       	rcall	.+364    	; 0x1c6 <main>
  5a:	75 c2       	rjmp	.+1258   	; 0x546 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <initialize>:
}

void initialize()
{
	// Enable output pins
		DDRB |= (1 << 1); //PWM A
  5e:	b9 9a       	sbi	0x17, 1	; 23
		DDRB |= (1 << 2); //PWM B
  60:	ba 9a       	sbi	0x17, 2	; 23
		DDRD |= (1 << 4); //DIR A1
  62:	8c 9a       	sbi	0x11, 4	; 17
		DDRD |= (1 << 5); //DIR A2
  64:	8d 9a       	sbi	0x11, 5	; 17
		DDRD |= (1 << 6); //DIR B1
  66:	8e 9a       	sbi	0x11, 6	; 17
		DDRD |= (1 << 7); //DIR B2
  68:	8f 9a       	sbi	0x11, 7	; 17
		DDRD |= (1 << 0); //Diode 0
  6a:	88 9a       	sbi	0x11, 0	; 17
		DDRD |= (1 << 1); //Diode 1
  6c:	89 9a       	sbi	0x11, 1	; 17
		DDRD |= (1 << 2); //Diode 2
  6e:	8a 9a       	sbi	0x11, 2	; 17


		//Enable input pins
		DDRC &= ~(1 << 0); //C1
  70:	a0 98       	cbi	0x14, 0	; 20
		DDRC &= ~(1 << 1); //C2
  72:	a1 98       	cbi	0x14, 1	; 20
		DDRC &= ~(1 << 2); //C3
  74:	a2 98       	cbi	0x14, 2	; 20
		DDRC &= ~(1 << 3); //C4
  76:	a3 98       	cbi	0x14, 3	; 20
		DDRC &= ~(1 << 4); //C5
  78:	a4 98       	cbi	0x14, 4	; 20
		DDRC &= ~(1 << 5); //C6
  7a:	a5 98       	cbi	0x14, 5	; 20
		DDRD &= ~(1 << 3); //C7
  7c:	8b 98       	cbi	0x11, 3	; 17

		//direction constant
		PORTD |= (1 << 4); //DIR A1
  7e:	94 9a       	sbi	0x12, 4	; 18
		PORTD &= ~(1 << 5); //DIR A2
  80:	95 98       	cbi	0x12, 5	; 18
		PORTD |= (1 << 6); //DIR B1
  82:	96 9a       	sbi	0x12, 6	; 18
		PORTD &= ~(1 << 7); //DIR B2
  84:	97 98       	cbi	0x12, 7	; 18

		//PWM settings

		ICR1  = 400;
  86:	80 e9       	ldi	r24, 0x90	; 144
  88:	91 e0       	ldi	r25, 0x01	; 1
  8a:	97 bd       	out	0x27, r25	; 39
  8c:	86 bd       	out	0x26, r24	; 38

//		//FastPwm 8 bit
//		TCCR1A=(1 << COM1A1)|(1 << COM1B1)|(1 << COM1A0)|(1 << COM1B0) | (1 << WGM10);
//		TCCR1B=(1<WGM12)|(1 << CS11);

		TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
  8e:	82 ea       	ldi	r24, 0xA2	; 162
  90:	8f bd       	out	0x2f, r24	; 47
		TCCR1B = (1 << WGM13) | (1<WGM12) | (1 << CS10);
  92:	81 e1       	ldi	r24, 0x11	; 17
  94:	8e bd       	out	0x2e, r24	; 46
}
  96:	08 95       	ret

00000098 <readSensors>:
 * 2^1 - second most right
 * 2^0 - most right
 */
void readSensors()
{
	sensors = (PINC & 0b00111111);
  98:	83 b3       	in	r24, 0x13	; 19
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	8f 73       	andi	r24, 0x3F	; 63
  9e:	90 70       	andi	r25, 0x00	; 0
  a0:	90 93 75 00 	sts	0x0075, r25
  a4:	80 93 74 00 	sts	0x0074, r24
	if(PIND & 8) sensors |= 0b01000000;
  a8:	83 9b       	sbis	0x10, 3	; 16
  aa:	05 c0       	rjmp	.+10     	; 0xb6 <readSensors+0x1e>
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	90 93 75 00 	sts	0x0075, r25
  b2:	80 93 74 00 	sts	0x0074, r24
  b6:	08 95       	ret

000000b8 <setLeftMotorPwm>:
static const int maxSpeed = 1000;

void setLeftMotorPwm(int value)
{
	//OCR1B = max(min(lmin + round(value*((float)lmax-lmin)/1000), lmax),lmin);
	OCR1B = lmin + (int)(value * ((float)lmax-lmin) / maxSpeed);
  b8:	aa 27       	eor	r26, r26
  ba:	97 fd       	sbrc	r25, 7
  bc:	a0 95       	com	r26
  be:	ba 2f       	mov	r27, r26
  c0:	bc 01       	movw	r22, r24
  c2:	cd 01       	movw	r24, r26
  c4:	2a d1       	rcall	.+596    	; 0x31a <__floatsisf>
  c6:	20 e0       	ldi	r18, 0x00	; 0
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	42 e0       	ldi	r20, 0x02	; 2
  cc:	53 e4       	ldi	r21, 0x43	; 67
  ce:	b1 d1       	rcall	.+866    	; 0x432 <__mulsf3>
  d0:	20 e0       	ldi	r18, 0x00	; 0
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	4a e7       	ldi	r20, 0x7A	; 122
  d6:	54 e4       	ldi	r21, 0x44	; 68
  d8:	85 d0       	rcall	.+266    	; 0x1e4 <__divsf3>
  da:	ec d0       	rcall	.+472    	; 0x2b4 <__fixsfsi>
  dc:	66 55       	subi	r22, 0x56	; 86
  de:	7f 4f       	sbci	r23, 0xFF	; 255
  e0:	79 bd       	out	0x29, r23	; 41
  e2:	68 bd       	out	0x28, r22	; 40
}
  e4:	08 95       	ret

000000e6 <setRightMotorPwm>:

void setRightMotorPwm(int value)
{
	//OCR1A = max(min(rmin + round(value*((float)rmax-rmin)/1000), rmax),rmin);
	OCR1A = rmin + (int)(value * ((float)rmax-rmin) / maxSpeed);
  e6:	aa 27       	eor	r26, r26
  e8:	97 fd       	sbrc	r25, 7
  ea:	a0 95       	com	r26
  ec:	ba 2f       	mov	r27, r26
  ee:	bc 01       	movw	r22, r24
  f0:	cd 01       	movw	r24, r26
  f2:	13 d1       	rcall	.+550    	; 0x31a <__floatsisf>
  f4:	20 e0       	ldi	r18, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	46 e1       	ldi	r20, 0x16	; 22
  fa:	53 e4       	ldi	r21, 0x43	; 67
  fc:	9a d1       	rcall	.+820    	; 0x432 <__mulsf3>
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	4a e7       	ldi	r20, 0x7A	; 122
 104:	54 e4       	ldi	r21, 0x44	; 68
 106:	6e d0       	rcall	.+220    	; 0x1e4 <__divsf3>
 108:	d5 d0       	rcall	.+426    	; 0x2b4 <__fixsfsi>
 10a:	6e 57       	subi	r22, 0x7E	; 126
 10c:	7f 4f       	sbci	r23, 0xFF	; 255
 10e:	7b bd       	out	0x2b, r23	; 43
 110:	6a bd       	out	0x2a, r22	; 42
}
 112:	08 95       	ret

00000114 <getDifference>:
int getDifference()
{
	int result = 0;
	
	for(int i = 0; i < 7; ++i)
		result += (sensors & (1 << ( 6- i))) ? k[i] : 0;
 114:	60 91 74 00 	lds	r22, 0x0074
 118:	70 91 75 00 	lds	r23, 0x0075
 11c:	e0 e6       	ldi	r30, 0x60	; 96
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	40 e0       	ldi	r20, 0x00	; 0
 122:	50 e0       	ldi	r21, 0x00	; 0
 124:	26 e0       	ldi	r18, 0x06	; 6
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	cb 01       	movw	r24, r22
 12a:	02 2e       	mov	r0, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <getDifference+0x1e>
 12e:	95 95       	asr	r25
 130:	87 95       	ror	r24
 132:	0a 94       	dec	r0
 134:	e2 f7       	brpl	.-8      	; 0x12e <getDifference+0x1a>
 136:	80 fd       	sbrc	r24, 0
 138:	03 c0       	rjmp	.+6      	; 0x140 <getDifference+0x2c>
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <getDifference+0x30>
 140:	80 81       	ld	r24, Z
 142:	91 81       	ldd	r25, Z+1	; 0x01
 144:	48 0f       	add	r20, r24
 146:	59 1f       	adc	r21, r25
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	30 40       	sbci	r19, 0x00	; 0
 14c:	32 96       	adiw	r30, 0x02	; 2
 */
int getDifference()
{
	int result = 0;
	
	for(int i = 0; i < 7; ++i)
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	2f 3f       	cpi	r18, 0xFF	; 255
 152:	38 07       	cpc	r19, r24
 154:	49 f7       	brne	.-46     	; 0x128 <getDifference+0x14>
		result += (sensors & (1 << ( 6- i))) ? k[i] : 0;
		
	return result;
}
 156:	ca 01       	movw	r24, r20
 158:	08 95       	ret

0000015a <diodesDiagnose>:

void diodesDiagnose(void)
{
	// light the middle diode if middle sensor is above the line
	if((sensors & (1 << 3)) > 0)
 15a:	80 91 74 00 	lds	r24, 0x0074
 15e:	83 ff       	sbrs	r24, 3
 160:	02 c0       	rjmp	.+4      	; 0x166 <diodesDiagnose+0xc>
		PORTD |= 2;
 162:	91 9a       	sbi	0x12, 1	; 18
 164:	01 c0       	rjmp	.+2      	; 0x168 <diodesDiagnose+0xe>
	else
		PORTD &= ~(2);
 166:	91 98       	cbi	0x12, 1	; 18
	// same for right sensor and bottom diode
	if((sensors & (1 << 4)) > 0)
 168:	84 ff       	sbrs	r24, 4
 16a:	02 c0       	rjmp	.+4      	; 0x170 <diodesDiagnose+0x16>
		PORTD |= 1;
 16c:	90 9a       	sbi	0x12, 0	; 18
 16e:	01 c0       	rjmp	.+2      	; 0x172 <diodesDiagnose+0x18>
	else
		PORTD &= ~(1);
 170:	90 98       	cbi	0x12, 0	; 18
	//same for left sensor and top diode
	if((sensors & (1 << 2)) > 0)
 172:	82 ff       	sbrs	r24, 2
 174:	02 c0       	rjmp	.+4      	; 0x17a <diodesDiagnose+0x20>
		PORTD |= 4;
 176:	92 9a       	sbi	0x12, 2	; 18
 178:	08 95       	ret
	else
		PORTD &= ~(4);
 17a:	92 98       	cbi	0x12, 2	; 18
 17c:	08 95       	ret

0000017e <indicateValue>:
}

void indicateValue(int val, int max)
{
 17e:	fc 01       	movw	r30, r24
 180:	9b 01       	movw	r18, r22
	PORTD &= ~(1);
 182:	90 98       	cbi	0x12, 0	; 18
	PORTD &= ~(2);
 184:	91 98       	cbi	0x12, 1	; 18
	PORTD &= ~(4);
 186:	92 98       	cbi	0x12, 2	; 18

	if (val < max / 4)
 188:	cb 01       	movw	r24, r22
 18a:	64 e0       	ldi	r22, 0x04	; 4
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	b4 d1       	rcall	.+872    	; 0x4f8 <__divmodhi4>
 190:	e6 17       	cp	r30, r22
 192:	f7 07       	cpc	r31, r23
 194:	bc f0       	brlt	.+46     	; 0x1c4 <indicateValue+0x46>
	{
		//nothing to do
	}
	else if (val < 2 * max / 4)
 196:	c9 01       	movw	r24, r18
 198:	62 e0       	ldi	r22, 0x02	; 2
 19a:	70 e0       	ldi	r23, 0x00	; 0
 19c:	ad d1       	rcall	.+858    	; 0x4f8 <__divmodhi4>
 19e:	e6 17       	cp	r30, r22
 1a0:	f7 07       	cpc	r31, r23
 1a2:	14 f4       	brge	.+4      	; 0x1a8 <indicateValue+0x2a>
	{
		PORTD |= 1;
 1a4:	90 9a       	sbi	0x12, 0	; 18
 1a6:	08 95       	ret
	}
	else if (val < 3 * max / 4)
 1a8:	c9 01       	movw	r24, r18
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	82 0f       	add	r24, r18
 1b0:	93 1f       	adc	r25, r19
 1b2:	64 e0       	ldi	r22, 0x04	; 4
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	a0 d1       	rcall	.+832    	; 0x4f8 <__divmodhi4>
 1b8:	e6 17       	cp	r30, r22
 1ba:	f7 07       	cpc	r31, r23
 1bc:	14 f4       	brge	.+4      	; 0x1c2 <indicateValue+0x44>
	{
		PORTD |= 2;
 1be:	91 9a       	sbi	0x12, 1	; 18
 1c0:	08 95       	ret
	}
	else
	{
		PORTD |= 4;
 1c2:	92 9a       	sbi	0x12, 2	; 18
 1c4:	08 95       	ret

000001c6 <main>:
 */
int sensors = 0;

int main(void)
{
	initialize();
 1c6:	4b df       	rcall	.-362    	; 0x5e <initialize>
	int propPart = 0;
	int steeringPart = 0;

	while(1)
	{
		readSensors();
 1c8:	67 df       	rcall	.-306    	; 0x98 <readSensors>
		//diodesDiagnose();
		
		previous_read = current_read;
		current_read = getDifference();
 1ca:	a4 df       	rcall	.-184    	; 0x114 <getDifference>
			setRightMotorPwm(1000 - steeringPart);
			setLeftMotorPwm(1000);
		}
		else
		{
			indicateValue(-steeringPart, 1000);
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	68 ee       	ldi	r22, 0xE8	; 232
 1d2:	73 e0       	ldi	r23, 0x03	; 3
 1d4:	d4 df       	rcall	.-88     	; 0x17e <indicateValue>
			
			setRightMotorPwm(1000);
 1d6:	88 ee       	ldi	r24, 0xE8	; 232
 1d8:	93 e0       	ldi	r25, 0x03	; 3
 1da:	85 df       	rcall	.-246    	; 0xe6 <setRightMotorPwm>
			setLeftMotorPwm(1000 + steeringPart);
 1dc:	88 ee       	ldi	r24, 0xE8	; 232
 1de:	93 e0       	ldi	r25, 0x03	; 3
 1e0:	6b df       	rcall	.-298    	; 0xb8 <setLeftMotorPwm>
 1e2:	f2 cf       	rjmp	.-28     	; 0x1c8 <main+0x2>

000001e4 <__divsf3>:
 1e4:	0c d0       	rcall	.+24     	; 0x1fe <__divsf3x>
 1e6:	eb c0       	rjmp	.+470    	; 0x3be <__fp_round>
 1e8:	e3 d0       	rcall	.+454    	; 0x3b0 <__fp_pscB>
 1ea:	40 f0       	brcs	.+16     	; 0x1fc <__divsf3+0x18>
 1ec:	da d0       	rcall	.+436    	; 0x3a2 <__fp_pscA>
 1ee:	30 f0       	brcs	.+12     	; 0x1fc <__divsf3+0x18>
 1f0:	21 f4       	brne	.+8      	; 0x1fa <__divsf3+0x16>
 1f2:	5f 3f       	cpi	r21, 0xFF	; 255
 1f4:	19 f0       	breq	.+6      	; 0x1fc <__divsf3+0x18>
 1f6:	cc c0       	rjmp	.+408    	; 0x390 <__fp_inf>
 1f8:	51 11       	cpse	r21, r1
 1fa:	15 c1       	rjmp	.+554    	; 0x426 <__fp_szero>
 1fc:	cf c0       	rjmp	.+414    	; 0x39c <__fp_nan>

000001fe <__divsf3x>:
 1fe:	f0 d0       	rcall	.+480    	; 0x3e0 <__fp_split3>
 200:	98 f3       	brcs	.-26     	; 0x1e8 <__divsf3+0x4>

00000202 <__divsf3_pse>:
 202:	99 23       	and	r25, r25
 204:	c9 f3       	breq	.-14     	; 0x1f8 <__divsf3+0x14>
 206:	55 23       	and	r21, r21
 208:	b1 f3       	breq	.-20     	; 0x1f6 <__divsf3+0x12>
 20a:	95 1b       	sub	r25, r21
 20c:	55 0b       	sbc	r21, r21
 20e:	bb 27       	eor	r27, r27
 210:	aa 27       	eor	r26, r26
 212:	62 17       	cp	r22, r18
 214:	73 07       	cpc	r23, r19
 216:	84 07       	cpc	r24, r20
 218:	38 f0       	brcs	.+14     	; 0x228 <__divsf3_pse+0x26>
 21a:	9f 5f       	subi	r25, 0xFF	; 255
 21c:	5f 4f       	sbci	r21, 0xFF	; 255
 21e:	22 0f       	add	r18, r18
 220:	33 1f       	adc	r19, r19
 222:	44 1f       	adc	r20, r20
 224:	aa 1f       	adc	r26, r26
 226:	a9 f3       	breq	.-22     	; 0x212 <__divsf3_pse+0x10>
 228:	33 d0       	rcall	.+102    	; 0x290 <__divsf3_pse+0x8e>
 22a:	0e 2e       	mov	r0, r30
 22c:	3a f0       	brmi	.+14     	; 0x23c <__divsf3_pse+0x3a>
 22e:	e0 e8       	ldi	r30, 0x80	; 128
 230:	30 d0       	rcall	.+96     	; 0x292 <__divsf3_pse+0x90>
 232:	91 50       	subi	r25, 0x01	; 1
 234:	50 40       	sbci	r21, 0x00	; 0
 236:	e6 95       	lsr	r30
 238:	00 1c       	adc	r0, r0
 23a:	ca f7       	brpl	.-14     	; 0x22e <__divsf3_pse+0x2c>
 23c:	29 d0       	rcall	.+82     	; 0x290 <__divsf3_pse+0x8e>
 23e:	fe 2f       	mov	r31, r30
 240:	27 d0       	rcall	.+78     	; 0x290 <__divsf3_pse+0x8e>
 242:	66 0f       	add	r22, r22
 244:	77 1f       	adc	r23, r23
 246:	88 1f       	adc	r24, r24
 248:	bb 1f       	adc	r27, r27
 24a:	26 17       	cp	r18, r22
 24c:	37 07       	cpc	r19, r23
 24e:	48 07       	cpc	r20, r24
 250:	ab 07       	cpc	r26, r27
 252:	b0 e8       	ldi	r27, 0x80	; 128
 254:	09 f0       	breq	.+2      	; 0x258 <__divsf3_pse+0x56>
 256:	bb 0b       	sbc	r27, r27
 258:	80 2d       	mov	r24, r0
 25a:	bf 01       	movw	r22, r30
 25c:	ff 27       	eor	r31, r31
 25e:	93 58       	subi	r25, 0x83	; 131
 260:	5f 4f       	sbci	r21, 0xFF	; 255
 262:	2a f0       	brmi	.+10     	; 0x26e <__divsf3_pse+0x6c>
 264:	9e 3f       	cpi	r25, 0xFE	; 254
 266:	51 05       	cpc	r21, r1
 268:	68 f0       	brcs	.+26     	; 0x284 <__divsf3_pse+0x82>
 26a:	92 c0       	rjmp	.+292    	; 0x390 <__fp_inf>
 26c:	dc c0       	rjmp	.+440    	; 0x426 <__fp_szero>
 26e:	5f 3f       	cpi	r21, 0xFF	; 255
 270:	ec f3       	brlt	.-6      	; 0x26c <__divsf3_pse+0x6a>
 272:	98 3e       	cpi	r25, 0xE8	; 232
 274:	dc f3       	brlt	.-10     	; 0x26c <__divsf3_pse+0x6a>
 276:	86 95       	lsr	r24
 278:	77 95       	ror	r23
 27a:	67 95       	ror	r22
 27c:	b7 95       	ror	r27
 27e:	f7 95       	ror	r31
 280:	9f 5f       	subi	r25, 0xFF	; 255
 282:	c9 f7       	brne	.-14     	; 0x276 <__divsf3_pse+0x74>
 284:	88 0f       	add	r24, r24
 286:	91 1d       	adc	r25, r1
 288:	96 95       	lsr	r25
 28a:	87 95       	ror	r24
 28c:	97 f9       	bld	r25, 7
 28e:	08 95       	ret
 290:	e1 e0       	ldi	r30, 0x01	; 1
 292:	66 0f       	add	r22, r22
 294:	77 1f       	adc	r23, r23
 296:	88 1f       	adc	r24, r24
 298:	bb 1f       	adc	r27, r27
 29a:	62 17       	cp	r22, r18
 29c:	73 07       	cpc	r23, r19
 29e:	84 07       	cpc	r24, r20
 2a0:	ba 07       	cpc	r27, r26
 2a2:	20 f0       	brcs	.+8      	; 0x2ac <__divsf3_pse+0xaa>
 2a4:	62 1b       	sub	r22, r18
 2a6:	73 0b       	sbc	r23, r19
 2a8:	84 0b       	sbc	r24, r20
 2aa:	ba 0b       	sbc	r27, r26
 2ac:	ee 1f       	adc	r30, r30
 2ae:	88 f7       	brcc	.-30     	; 0x292 <__divsf3_pse+0x90>
 2b0:	e0 95       	com	r30
 2b2:	08 95       	ret

000002b4 <__fixsfsi>:
 2b4:	04 d0       	rcall	.+8      	; 0x2be <__fixunssfsi>
 2b6:	68 94       	set
 2b8:	b1 11       	cpse	r27, r1
 2ba:	b5 c0       	rjmp	.+362    	; 0x426 <__fp_szero>
 2bc:	08 95       	ret

000002be <__fixunssfsi>:
 2be:	98 d0       	rcall	.+304    	; 0x3f0 <__fp_splitA>
 2c0:	88 f0       	brcs	.+34     	; 0x2e4 <__fixunssfsi+0x26>
 2c2:	9f 57       	subi	r25, 0x7F	; 127
 2c4:	90 f0       	brcs	.+36     	; 0x2ea <__fixunssfsi+0x2c>
 2c6:	b9 2f       	mov	r27, r25
 2c8:	99 27       	eor	r25, r25
 2ca:	b7 51       	subi	r27, 0x17	; 23
 2cc:	a0 f0       	brcs	.+40     	; 0x2f6 <__fixunssfsi+0x38>
 2ce:	d1 f0       	breq	.+52     	; 0x304 <__fixunssfsi+0x46>
 2d0:	66 0f       	add	r22, r22
 2d2:	77 1f       	adc	r23, r23
 2d4:	88 1f       	adc	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	1a f0       	brmi	.+6      	; 0x2e0 <__fixunssfsi+0x22>
 2da:	ba 95       	dec	r27
 2dc:	c9 f7       	brne	.-14     	; 0x2d0 <__fixunssfsi+0x12>
 2de:	12 c0       	rjmp	.+36     	; 0x304 <__fixunssfsi+0x46>
 2e0:	b1 30       	cpi	r27, 0x01	; 1
 2e2:	81 f0       	breq	.+32     	; 0x304 <__fixunssfsi+0x46>
 2e4:	9f d0       	rcall	.+318    	; 0x424 <__fp_zero>
 2e6:	b1 e0       	ldi	r27, 0x01	; 1
 2e8:	08 95       	ret
 2ea:	9c c0       	rjmp	.+312    	; 0x424 <__fp_zero>
 2ec:	67 2f       	mov	r22, r23
 2ee:	78 2f       	mov	r23, r24
 2f0:	88 27       	eor	r24, r24
 2f2:	b8 5f       	subi	r27, 0xF8	; 248
 2f4:	39 f0       	breq	.+14     	; 0x304 <__fixunssfsi+0x46>
 2f6:	b9 3f       	cpi	r27, 0xF9	; 249
 2f8:	cc f3       	brlt	.-14     	; 0x2ec <__fixunssfsi+0x2e>
 2fa:	86 95       	lsr	r24
 2fc:	77 95       	ror	r23
 2fe:	67 95       	ror	r22
 300:	b3 95       	inc	r27
 302:	d9 f7       	brne	.-10     	; 0x2fa <__fixunssfsi+0x3c>
 304:	3e f4       	brtc	.+14     	; 0x314 <__fixunssfsi+0x56>
 306:	90 95       	com	r25
 308:	80 95       	com	r24
 30a:	70 95       	com	r23
 30c:	61 95       	neg	r22
 30e:	7f 4f       	sbci	r23, 0xFF	; 255
 310:	8f 4f       	sbci	r24, 0xFF	; 255
 312:	9f 4f       	sbci	r25, 0xFF	; 255
 314:	08 95       	ret

00000316 <__floatunsisf>:
 316:	e8 94       	clt
 318:	09 c0       	rjmp	.+18     	; 0x32c <__floatsisf+0x12>

0000031a <__floatsisf>:
 31a:	97 fb       	bst	r25, 7
 31c:	3e f4       	brtc	.+14     	; 0x32c <__floatsisf+0x12>
 31e:	90 95       	com	r25
 320:	80 95       	com	r24
 322:	70 95       	com	r23
 324:	61 95       	neg	r22
 326:	7f 4f       	sbci	r23, 0xFF	; 255
 328:	8f 4f       	sbci	r24, 0xFF	; 255
 32a:	9f 4f       	sbci	r25, 0xFF	; 255
 32c:	99 23       	and	r25, r25
 32e:	a9 f0       	breq	.+42     	; 0x35a <__floatsisf+0x40>
 330:	f9 2f       	mov	r31, r25
 332:	96 e9       	ldi	r25, 0x96	; 150
 334:	bb 27       	eor	r27, r27
 336:	93 95       	inc	r25
 338:	f6 95       	lsr	r31
 33a:	87 95       	ror	r24
 33c:	77 95       	ror	r23
 33e:	67 95       	ror	r22
 340:	b7 95       	ror	r27
 342:	f1 11       	cpse	r31, r1
 344:	f8 cf       	rjmp	.-16     	; 0x336 <__floatsisf+0x1c>
 346:	fa f4       	brpl	.+62     	; 0x386 <__floatsisf+0x6c>
 348:	bb 0f       	add	r27, r27
 34a:	11 f4       	brne	.+4      	; 0x350 <__floatsisf+0x36>
 34c:	60 ff       	sbrs	r22, 0
 34e:	1b c0       	rjmp	.+54     	; 0x386 <__floatsisf+0x6c>
 350:	6f 5f       	subi	r22, 0xFF	; 255
 352:	7f 4f       	sbci	r23, 0xFF	; 255
 354:	8f 4f       	sbci	r24, 0xFF	; 255
 356:	9f 4f       	sbci	r25, 0xFF	; 255
 358:	16 c0       	rjmp	.+44     	; 0x386 <__floatsisf+0x6c>
 35a:	88 23       	and	r24, r24
 35c:	11 f0       	breq	.+4      	; 0x362 <__floatsisf+0x48>
 35e:	96 e9       	ldi	r25, 0x96	; 150
 360:	11 c0       	rjmp	.+34     	; 0x384 <__floatsisf+0x6a>
 362:	77 23       	and	r23, r23
 364:	21 f0       	breq	.+8      	; 0x36e <__floatsisf+0x54>
 366:	9e e8       	ldi	r25, 0x8E	; 142
 368:	87 2f       	mov	r24, r23
 36a:	76 2f       	mov	r23, r22
 36c:	05 c0       	rjmp	.+10     	; 0x378 <__floatsisf+0x5e>
 36e:	66 23       	and	r22, r22
 370:	71 f0       	breq	.+28     	; 0x38e <__floatsisf+0x74>
 372:	96 e8       	ldi	r25, 0x86	; 134
 374:	86 2f       	mov	r24, r22
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	2a f0       	brmi	.+10     	; 0x386 <__floatsisf+0x6c>
 37c:	9a 95       	dec	r25
 37e:	66 0f       	add	r22, r22
 380:	77 1f       	adc	r23, r23
 382:	88 1f       	adc	r24, r24
 384:	da f7       	brpl	.-10     	; 0x37c <__floatsisf+0x62>
 386:	88 0f       	add	r24, r24
 388:	96 95       	lsr	r25
 38a:	87 95       	ror	r24
 38c:	97 f9       	bld	r25, 7
 38e:	08 95       	ret

00000390 <__fp_inf>:
 390:	97 f9       	bld	r25, 7
 392:	9f 67       	ori	r25, 0x7F	; 127
 394:	80 e8       	ldi	r24, 0x80	; 128
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	08 95       	ret

0000039c <__fp_nan>:
 39c:	9f ef       	ldi	r25, 0xFF	; 255
 39e:	80 ec       	ldi	r24, 0xC0	; 192
 3a0:	08 95       	ret

000003a2 <__fp_pscA>:
 3a2:	00 24       	eor	r0, r0
 3a4:	0a 94       	dec	r0
 3a6:	16 16       	cp	r1, r22
 3a8:	17 06       	cpc	r1, r23
 3aa:	18 06       	cpc	r1, r24
 3ac:	09 06       	cpc	r0, r25
 3ae:	08 95       	ret

000003b0 <__fp_pscB>:
 3b0:	00 24       	eor	r0, r0
 3b2:	0a 94       	dec	r0
 3b4:	12 16       	cp	r1, r18
 3b6:	13 06       	cpc	r1, r19
 3b8:	14 06       	cpc	r1, r20
 3ba:	05 06       	cpc	r0, r21
 3bc:	08 95       	ret

000003be <__fp_round>:
 3be:	09 2e       	mov	r0, r25
 3c0:	03 94       	inc	r0
 3c2:	00 0c       	add	r0, r0
 3c4:	11 f4       	brne	.+4      	; 0x3ca <__fp_round+0xc>
 3c6:	88 23       	and	r24, r24
 3c8:	52 f0       	brmi	.+20     	; 0x3de <__fp_round+0x20>
 3ca:	bb 0f       	add	r27, r27
 3cc:	40 f4       	brcc	.+16     	; 0x3de <__fp_round+0x20>
 3ce:	bf 2b       	or	r27, r31
 3d0:	11 f4       	brne	.+4      	; 0x3d6 <__fp_round+0x18>
 3d2:	60 ff       	sbrs	r22, 0
 3d4:	04 c0       	rjmp	.+8      	; 0x3de <__fp_round+0x20>
 3d6:	6f 5f       	subi	r22, 0xFF	; 255
 3d8:	7f 4f       	sbci	r23, 0xFF	; 255
 3da:	8f 4f       	sbci	r24, 0xFF	; 255
 3dc:	9f 4f       	sbci	r25, 0xFF	; 255
 3de:	08 95       	ret

000003e0 <__fp_split3>:
 3e0:	57 fd       	sbrc	r21, 7
 3e2:	90 58       	subi	r25, 0x80	; 128
 3e4:	44 0f       	add	r20, r20
 3e6:	55 1f       	adc	r21, r21
 3e8:	59 f0       	breq	.+22     	; 0x400 <__fp_splitA+0x10>
 3ea:	5f 3f       	cpi	r21, 0xFF	; 255
 3ec:	71 f0       	breq	.+28     	; 0x40a <__fp_splitA+0x1a>
 3ee:	47 95       	ror	r20

000003f0 <__fp_splitA>:
 3f0:	88 0f       	add	r24, r24
 3f2:	97 fb       	bst	r25, 7
 3f4:	99 1f       	adc	r25, r25
 3f6:	61 f0       	breq	.+24     	; 0x410 <__fp_splitA+0x20>
 3f8:	9f 3f       	cpi	r25, 0xFF	; 255
 3fa:	79 f0       	breq	.+30     	; 0x41a <__fp_splitA+0x2a>
 3fc:	87 95       	ror	r24
 3fe:	08 95       	ret
 400:	12 16       	cp	r1, r18
 402:	13 06       	cpc	r1, r19
 404:	14 06       	cpc	r1, r20
 406:	55 1f       	adc	r21, r21
 408:	f2 cf       	rjmp	.-28     	; 0x3ee <__fp_split3+0xe>
 40a:	46 95       	lsr	r20
 40c:	f1 df       	rcall	.-30     	; 0x3f0 <__fp_splitA>
 40e:	08 c0       	rjmp	.+16     	; 0x420 <__fp_splitA+0x30>
 410:	16 16       	cp	r1, r22
 412:	17 06       	cpc	r1, r23
 414:	18 06       	cpc	r1, r24
 416:	99 1f       	adc	r25, r25
 418:	f1 cf       	rjmp	.-30     	; 0x3fc <__fp_splitA+0xc>
 41a:	86 95       	lsr	r24
 41c:	71 05       	cpc	r23, r1
 41e:	61 05       	cpc	r22, r1
 420:	08 94       	sec
 422:	08 95       	ret

00000424 <__fp_zero>:
 424:	e8 94       	clt

00000426 <__fp_szero>:
 426:	bb 27       	eor	r27, r27
 428:	66 27       	eor	r22, r22
 42a:	77 27       	eor	r23, r23
 42c:	cb 01       	movw	r24, r22
 42e:	97 f9       	bld	r25, 7
 430:	08 95       	ret

00000432 <__mulsf3>:
 432:	0b d0       	rcall	.+22     	; 0x44a <__mulsf3x>
 434:	c4 cf       	rjmp	.-120    	; 0x3be <__fp_round>
 436:	b5 df       	rcall	.-150    	; 0x3a2 <__fp_pscA>
 438:	28 f0       	brcs	.+10     	; 0x444 <__mulsf3+0x12>
 43a:	ba df       	rcall	.-140    	; 0x3b0 <__fp_pscB>
 43c:	18 f0       	brcs	.+6      	; 0x444 <__mulsf3+0x12>
 43e:	95 23       	and	r25, r21
 440:	09 f0       	breq	.+2      	; 0x444 <__mulsf3+0x12>
 442:	a6 cf       	rjmp	.-180    	; 0x390 <__fp_inf>
 444:	ab cf       	rjmp	.-170    	; 0x39c <__fp_nan>
 446:	11 24       	eor	r1, r1
 448:	ee cf       	rjmp	.-36     	; 0x426 <__fp_szero>

0000044a <__mulsf3x>:
 44a:	ca df       	rcall	.-108    	; 0x3e0 <__fp_split3>
 44c:	a0 f3       	brcs	.-24     	; 0x436 <__mulsf3+0x4>

0000044e <__mulsf3_pse>:
 44e:	95 9f       	mul	r25, r21
 450:	d1 f3       	breq	.-12     	; 0x446 <__mulsf3+0x14>
 452:	95 0f       	add	r25, r21
 454:	50 e0       	ldi	r21, 0x00	; 0
 456:	55 1f       	adc	r21, r21
 458:	62 9f       	mul	r22, r18
 45a:	f0 01       	movw	r30, r0
 45c:	72 9f       	mul	r23, r18
 45e:	bb 27       	eor	r27, r27
 460:	f0 0d       	add	r31, r0
 462:	b1 1d       	adc	r27, r1
 464:	63 9f       	mul	r22, r19
 466:	aa 27       	eor	r26, r26
 468:	f0 0d       	add	r31, r0
 46a:	b1 1d       	adc	r27, r1
 46c:	aa 1f       	adc	r26, r26
 46e:	64 9f       	mul	r22, r20
 470:	66 27       	eor	r22, r22
 472:	b0 0d       	add	r27, r0
 474:	a1 1d       	adc	r26, r1
 476:	66 1f       	adc	r22, r22
 478:	82 9f       	mul	r24, r18
 47a:	22 27       	eor	r18, r18
 47c:	b0 0d       	add	r27, r0
 47e:	a1 1d       	adc	r26, r1
 480:	62 1f       	adc	r22, r18
 482:	73 9f       	mul	r23, r19
 484:	b0 0d       	add	r27, r0
 486:	a1 1d       	adc	r26, r1
 488:	62 1f       	adc	r22, r18
 48a:	83 9f       	mul	r24, r19
 48c:	a0 0d       	add	r26, r0
 48e:	61 1d       	adc	r22, r1
 490:	22 1f       	adc	r18, r18
 492:	74 9f       	mul	r23, r20
 494:	33 27       	eor	r19, r19
 496:	a0 0d       	add	r26, r0
 498:	61 1d       	adc	r22, r1
 49a:	23 1f       	adc	r18, r19
 49c:	84 9f       	mul	r24, r20
 49e:	60 0d       	add	r22, r0
 4a0:	21 1d       	adc	r18, r1
 4a2:	82 2f       	mov	r24, r18
 4a4:	76 2f       	mov	r23, r22
 4a6:	6a 2f       	mov	r22, r26
 4a8:	11 24       	eor	r1, r1
 4aa:	9f 57       	subi	r25, 0x7F	; 127
 4ac:	50 40       	sbci	r21, 0x00	; 0
 4ae:	8a f0       	brmi	.+34     	; 0x4d2 <__stack+0x73>
 4b0:	e1 f0       	breq	.+56     	; 0x4ea <__stack+0x8b>
 4b2:	88 23       	and	r24, r24
 4b4:	4a f0       	brmi	.+18     	; 0x4c8 <__stack+0x69>
 4b6:	ee 0f       	add	r30, r30
 4b8:	ff 1f       	adc	r31, r31
 4ba:	bb 1f       	adc	r27, r27
 4bc:	66 1f       	adc	r22, r22
 4be:	77 1f       	adc	r23, r23
 4c0:	88 1f       	adc	r24, r24
 4c2:	91 50       	subi	r25, 0x01	; 1
 4c4:	50 40       	sbci	r21, 0x00	; 0
 4c6:	a9 f7       	brne	.-22     	; 0x4b2 <__stack+0x53>
 4c8:	9e 3f       	cpi	r25, 0xFE	; 254
 4ca:	51 05       	cpc	r21, r1
 4cc:	70 f0       	brcs	.+28     	; 0x4ea <__stack+0x8b>
 4ce:	60 cf       	rjmp	.-320    	; 0x390 <__fp_inf>
 4d0:	aa cf       	rjmp	.-172    	; 0x426 <__fp_szero>
 4d2:	5f 3f       	cpi	r21, 0xFF	; 255
 4d4:	ec f3       	brlt	.-6      	; 0x4d0 <__stack+0x71>
 4d6:	98 3e       	cpi	r25, 0xE8	; 232
 4d8:	dc f3       	brlt	.-10     	; 0x4d0 <__stack+0x71>
 4da:	86 95       	lsr	r24
 4dc:	77 95       	ror	r23
 4de:	67 95       	ror	r22
 4e0:	b7 95       	ror	r27
 4e2:	f7 95       	ror	r31
 4e4:	e7 95       	ror	r30
 4e6:	9f 5f       	subi	r25, 0xFF	; 255
 4e8:	c1 f7       	brne	.-16     	; 0x4da <__stack+0x7b>
 4ea:	fe 2b       	or	r31, r30
 4ec:	88 0f       	add	r24, r24
 4ee:	91 1d       	adc	r25, r1
 4f0:	96 95       	lsr	r25
 4f2:	87 95       	ror	r24
 4f4:	97 f9       	bld	r25, 7
 4f6:	08 95       	ret

000004f8 <__divmodhi4>:
 4f8:	97 fb       	bst	r25, 7
 4fa:	09 2e       	mov	r0, r25
 4fc:	07 26       	eor	r0, r23
 4fe:	0a d0       	rcall	.+20     	; 0x514 <__divmodhi4_neg1>
 500:	77 fd       	sbrc	r23, 7
 502:	04 d0       	rcall	.+8      	; 0x50c <__divmodhi4_neg2>
 504:	0c d0       	rcall	.+24     	; 0x51e <__udivmodhi4>
 506:	06 d0       	rcall	.+12     	; 0x514 <__divmodhi4_neg1>
 508:	00 20       	and	r0, r0
 50a:	1a f4       	brpl	.+6      	; 0x512 <__divmodhi4_exit>

0000050c <__divmodhi4_neg2>:
 50c:	70 95       	com	r23
 50e:	61 95       	neg	r22
 510:	7f 4f       	sbci	r23, 0xFF	; 255

00000512 <__divmodhi4_exit>:
 512:	08 95       	ret

00000514 <__divmodhi4_neg1>:
 514:	f6 f7       	brtc	.-4      	; 0x512 <__divmodhi4_exit>
 516:	90 95       	com	r25
 518:	81 95       	neg	r24
 51a:	9f 4f       	sbci	r25, 0xFF	; 255
 51c:	08 95       	ret

0000051e <__udivmodhi4>:
 51e:	aa 1b       	sub	r26, r26
 520:	bb 1b       	sub	r27, r27
 522:	51 e1       	ldi	r21, 0x11	; 17
 524:	07 c0       	rjmp	.+14     	; 0x534 <__udivmodhi4_ep>

00000526 <__udivmodhi4_loop>:
 526:	aa 1f       	adc	r26, r26
 528:	bb 1f       	adc	r27, r27
 52a:	a6 17       	cp	r26, r22
 52c:	b7 07       	cpc	r27, r23
 52e:	10 f0       	brcs	.+4      	; 0x534 <__udivmodhi4_ep>
 530:	a6 1b       	sub	r26, r22
 532:	b7 0b       	sbc	r27, r23

00000534 <__udivmodhi4_ep>:
 534:	88 1f       	adc	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	5a 95       	dec	r21
 53a:	a9 f7       	brne	.-22     	; 0x526 <__udivmodhi4_loop>
 53c:	80 95       	com	r24
 53e:	90 95       	com	r25
 540:	bc 01       	movw	r22, r24
 542:	cd 01       	movw	r24, r26
 544:	08 95       	ret

00000546 <_exit>:
 546:	f8 94       	cli

00000548 <__stop_program>:
 548:	ff cf       	rjmp	.-2      	; 0x548 <__stop_program>
