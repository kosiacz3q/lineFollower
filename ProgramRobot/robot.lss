
robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000752  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000752  000007e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800080  00800080  00000806  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000806  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000108  00000000  00000000  00000826  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002bf  00000000  00000000  0000092e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000014b  00000000  00000000  00000bed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d1  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000155  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012c  00000000  00000000  000011f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e5       	ldi	r30, 0x52	; 82
  3a:	f7 e0       	ldi	r31, 0x07	; 7
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	a0 38       	cpi	r26, 0x80	; 128
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e8       	ldi	r26, 0x80	; 128
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a2 38       	cpi	r26, 0x82	; 130
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	d0 d0       	rcall	.+416    	; 0x1fa <main>
  5a:	79 c3       	rjmp	.+1778   	; 0x74e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <initialize>:
}

void initialize()
{
	// Enable output pins
	DDRB |= (1 << 1); //PWM A
  5e:	b9 9a       	sbi	0x17, 1	; 23
	DDRB |= (1 << 2); //PWM B
  60:	ba 9a       	sbi	0x17, 2	; 23
	DDRD |= (1 << 4); //DIR A1
  62:	8c 9a       	sbi	0x11, 4	; 17
	DDRD |= (1 << 5); //DIR A2
  64:	8d 9a       	sbi	0x11, 5	; 17
	DDRD |= (1 << 6); //DIR B1
  66:	8e 9a       	sbi	0x11, 6	; 17
	DDRD |= (1 << 7); //DIR B2
  68:	8f 9a       	sbi	0x11, 7	; 17
	DDRD |= (1 << 0); //Diode 0
  6a:	88 9a       	sbi	0x11, 0	; 17
	DDRD |= (1 << 1); //Diode 1
  6c:	89 9a       	sbi	0x11, 1	; 17
	DDRD |= (1 << 2); //Diode 2
  6e:	8a 9a       	sbi	0x11, 2	; 17


	//Enable input pins
	DDRC &= ~(1 << 0); //C1
  70:	a0 98       	cbi	0x14, 0	; 20
	DDRC &= ~(1 << 1); //C2
  72:	a1 98       	cbi	0x14, 1	; 20
	DDRC &= ~(1 << 2); //C3
  74:	a2 98       	cbi	0x14, 2	; 20
	DDRC &= ~(1 << 3); //C4
  76:	a3 98       	cbi	0x14, 3	; 20
	DDRC &= ~(1 << 4); //C5
  78:	a4 98       	cbi	0x14, 4	; 20
	DDRC &= ~(1 << 5); //C6
  7a:	a5 98       	cbi	0x14, 5	; 20
	DDRD &= ~(1 << 3); //C7
  7c:	8b 98       	cbi	0x11, 3	; 17

	//direction constant
	PORTD |= (1 << 4); //DIR A1
  7e:	94 9a       	sbi	0x12, 4	; 18
	PORTD &= ~(1 << 5); //DIR A2
  80:	95 98       	cbi	0x12, 5	; 18
	PORTD |= (1 << 6); //DIR B1
  82:	96 9a       	sbi	0x12, 6	; 18
	PORTD &= ~(1 << 7); //DIR B2
  84:	97 98       	cbi	0x12, 7	; 18

	//PWM settings

	ICR1  = 400;
  86:	80 e9       	ldi	r24, 0x90	; 144
  88:	91 e0       	ldi	r25, 0x01	; 1
  8a:	97 bd       	out	0x27, r25	; 39
  8c:	86 bd       	out	0x26, r24	; 38

	// FastPwm 8 bit
	// TCCR1A=(1 << COM1A1)|(1 << COM1B1)|(1 << COM1A0)|(1 << COM1B0) | (1 << WGM10);
	// TCCR1B=(1<WGM12)|(1 << CS11);

	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
  8e:	82 ea       	ldi	r24, 0xA2	; 162
  90:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM13) | (1<WGM12) | (1 << CS10);
  92:	81 e1       	ldi	r24, 0x11	; 17
  94:	8e bd       	out	0x2e, r24	; 46
}
  96:	08 95       	ret

00000098 <updateSensors>:
 * 2^1 - second most right
 * 2^0 - most right
 */
void updateSensors()
{
	sensors = (PINC & 0b00111111) | ((PIND & 8) ? 0b01000000 : 0);
  98:	83 b3       	in	r24, 0x13	; 19
  9a:	83 99       	sbic	0x10, 3	; 16
  9c:	03 c0       	rjmp	.+6      	; 0xa4 <updateSensors+0xc>
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <updateSensors+0x10>
  a4:	20 e4       	ldi	r18, 0x40	; 64
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	48 2f       	mov	r20, r24
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	4f 73       	andi	r20, 0x3F	; 63
  ae:	50 70       	andi	r21, 0x00	; 0
  b0:	42 2b       	or	r20, r18
  b2:	53 2b       	or	r21, r19
  b4:	50 93 81 00 	sts	0x0081, r21
  b8:	40 93 80 00 	sts	0x0080, r20
	sensors = ~sensors;
	#endif
	
	
	//selecting active sensor
	if (sensors)
  bc:	41 15       	cp	r20, r1
  be:	51 05       	cpc	r21, r1
  c0:	61 f1       	breq	.+88     	; 0x11a <updateSensors+0x82>
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
		for (int i = 0; i < 3; ++i)
		{
			if (sensors & (1 << i))
			{
				activeSensor = i;
				return;
  c6:	e6 e0       	ldi	r30, 0x06	; 6
  c8:	f0 e0       	ldi	r31, 0x00	; 0
	//selecting active sensor
	if (sensors)
	{
		for (int i = 0; i < 3; ++i)
		{
			if (sensors & (1 << i))
  ca:	ca 01       	movw	r24, r20
  cc:	02 2e       	mov	r0, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <updateSensors+0x3c>
  d0:	95 95       	asr	r25
  d2:	87 95       	ror	r24
  d4:	0a 94       	dec	r0
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <updateSensors+0x38>
  d8:	80 ff       	sbrs	r24, 0
  da:	05 c0       	rjmp	.+10     	; 0xe6 <updateSensors+0x4e>
			{
				activeSensor = i;
  dc:	30 93 75 00 	sts	0x0075, r19
  e0:	20 93 74 00 	sts	0x0074, r18
  e4:	08 95       	ret
				return;
  e6:	bf 01       	movw	r22, r30
  e8:	62 1b       	sub	r22, r18
  ea:	73 0b       	sbc	r23, r19
			}
			
			if (sensors & (1 << 6 - i))
  ec:	ca 01       	movw	r24, r20
  ee:	06 2e       	mov	r0, r22
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <updateSensors+0x5e>
  f2:	95 95       	asr	r25
  f4:	87 95       	ror	r24
  f6:	0a 94       	dec	r0
  f8:	e2 f7       	brpl	.-8      	; 0xf2 <updateSensors+0x5a>
  fa:	80 ff       	sbrs	r24, 0
  fc:	05 c0       	rjmp	.+10     	; 0x108 <updateSensors+0x70>
			{
				activeSensor = 6 - i;
  fe:	70 93 75 00 	sts	0x0075, r23
 102:	60 93 74 00 	sts	0x0074, r22
 106:	08 95       	ret
	
	
	//selecting active sensor
	if (sensors)
	{
		for (int i = 0; i < 3; ++i)
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	23 30       	cpi	r18, 0x03	; 3
 10e:	31 05       	cpc	r19, r1
 110:	e1 f6       	brne	.-72     	; 0xca <updateSensors+0x32>
				activeSensor = 6 - i;
				return;
			}
		}
		
		activeSensor = 3;
 112:	30 93 75 00 	sts	0x0075, r19
 116:	20 93 74 00 	sts	0x0074, r18
 11a:	08 95       	ret

0000011c <setLeftMotorPwm>:
const int maxSpeed = 1000;

void setLeftMotorPwm(int value)
{
	//OCR1B = max(min(lmin + round(value*((float)lmax-lmin)/1000), lmax),lmin);
	OCR1B = lmin + (int)(value * ((float)lmax-lmin) / maxSpeed);
 11c:	aa 27       	eor	r26, r26
 11e:	97 fd       	sbrc	r25, 7
 120:	a0 95       	com	r26
 122:	ba 2f       	mov	r27, r26
 124:	bc 01       	movw	r22, r24
 126:	cd 01       	movw	r24, r26
 128:	fc d1       	rcall	.+1016   	; 0x522 <__floatsisf>
 12a:	20 e0       	ldi	r18, 0x00	; 0
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	42 e0       	ldi	r20, 0x02	; 2
 130:	53 e4       	ldi	r21, 0x43	; 67
 132:	83 d2       	rcall	.+1286   	; 0x63a <__mulsf3>
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	4a e7       	ldi	r20, 0x7A	; 122
 13a:	54 e4       	ldi	r21, 0x44	; 68
 13c:	57 d1       	rcall	.+686    	; 0x3ec <__divsf3>
 13e:	be d1       	rcall	.+892    	; 0x4bc <__fixsfsi>
 140:	66 55       	subi	r22, 0x56	; 86
 142:	7f 4f       	sbci	r23, 0xFF	; 255
 144:	79 bd       	out	0x29, r23	; 41
 146:	68 bd       	out	0x28, r22	; 40
}
 148:	08 95       	ret

0000014a <setRightMotorPwm>:

void setRightMotorPwm(int value)
{
	//OCR1A = max(min(rmin + round(value*((float)rmax-rmin)/1000), rmax),rmin);
	OCR1A = rmin + (int)(value * ((float)rmax-rmin) / maxSpeed);
 14a:	aa 27       	eor	r26, r26
 14c:	97 fd       	sbrc	r25, 7
 14e:	a0 95       	com	r26
 150:	ba 2f       	mov	r27, r26
 152:	bc 01       	movw	r22, r24
 154:	cd 01       	movw	r24, r26
 156:	e5 d1       	rcall	.+970    	; 0x522 <__floatsisf>
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	46 e1       	ldi	r20, 0x16	; 22
 15e:	53 e4       	ldi	r21, 0x43	; 67
 160:	6c d2       	rcall	.+1240   	; 0x63a <__mulsf3>
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	4a e7       	ldi	r20, 0x7A	; 122
 168:	54 e4       	ldi	r21, 0x44	; 68
 16a:	40 d1       	rcall	.+640    	; 0x3ec <__divsf3>
 16c:	a7 d1       	rcall	.+846    	; 0x4bc <__fixsfsi>
 16e:	6e 57       	subi	r22, 0x7E	; 126
 170:	7f 4f       	sbci	r23, 0xFF	; 255
 172:	7b bd       	out	0x2b, r23	; 43
 174:	6a bd       	out	0x2a, r22	; 42
}
 176:	08 95       	ret

00000178 <getSteeringValue>:
 * and so on
 * If more than one sensor is above the line the return value is sum of those k's.
 *
 */
int getSteeringValue()
{
 178:	e0 91 74 00 	lds	r30, 0x0074
 17c:	f0 91 75 00 	lds	r31, 0x0075
 180:	ee 0f       	add	r30, r30
 182:	ff 1f       	adc	r31, r31
 184:	e0 5a       	subi	r30, 0xA0	; 160
 186:	ff 4f       	sbci	r31, 0xFF	; 255
		result += (sensors & (1 << ( 6- i))) ? k[i] : 0;
		
	return result;*/
	
	return k[activeSensor];
}
 188:	80 81       	ld	r24, Z
 18a:	91 81       	ldd	r25, Z+1	; 0x01
 18c:	08 95       	ret

0000018e <diodesDiagnose>:

void diodesDiagnose(void)
{
	// light the middle diode if middle sensor is above the line
	if((sensors & (1 << 3)) > 0)
 18e:	80 91 80 00 	lds	r24, 0x0080
 192:	83 ff       	sbrs	r24, 3
 194:	02 c0       	rjmp	.+4      	; 0x19a <diodesDiagnose+0xc>
		PORTD |= 2;
 196:	91 9a       	sbi	0x12, 1	; 18
 198:	01 c0       	rjmp	.+2      	; 0x19c <diodesDiagnose+0xe>
	else
		PORTD &= ~(2);
 19a:	91 98       	cbi	0x12, 1	; 18
		
	// same for right sensor and bottom diode
	if((sensors & (1 << 6)) > 0)
 19c:	86 ff       	sbrs	r24, 6
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <diodesDiagnose+0x16>
		PORTD |= 1;
 1a0:	90 9a       	sbi	0x12, 0	; 18
 1a2:	01 c0       	rjmp	.+2      	; 0x1a6 <diodesDiagnose+0x18>
	else
		PORTD &= ~(1);
 1a4:	90 98       	cbi	0x12, 0	; 18
	//same for left sensor and top diode
	if((sensors & (1 << 0)) > 0)
 1a6:	80 ff       	sbrs	r24, 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <diodesDiagnose+0x20>
		PORTD |= 4;
 1aa:	92 9a       	sbi	0x12, 2	; 18
 1ac:	08 95       	ret
	else
		PORTD &= ~(4);
 1ae:	92 98       	cbi	0x12, 2	; 18
 1b0:	08 95       	ret

000001b2 <indicateValue>:
}

void indicateValue(int val, int max)
{
 1b2:	fc 01       	movw	r30, r24
 1b4:	9b 01       	movw	r18, r22
	PORTD &= ~(1);
 1b6:	90 98       	cbi	0x12, 0	; 18
	PORTD &= ~(2);
 1b8:	91 98       	cbi	0x12, 1	; 18
	PORTD &= ~(4);
 1ba:	92 98       	cbi	0x12, 2	; 18

	if (val < max / 4)
 1bc:	cb 01       	movw	r24, r22
 1be:	64 e0       	ldi	r22, 0x04	; 4
 1c0:	70 e0       	ldi	r23, 0x00	; 0
 1c2:	9e d2       	rcall	.+1340   	; 0x700 <__divmodhi4>
 1c4:	e6 17       	cp	r30, r22
 1c6:	f7 07       	cpc	r31, r23
 1c8:	bc f0       	brlt	.+46     	; 0x1f8 <indicateValue+0x46>
	{
		//nothing to do
	}
	else if (val < 2 * max / 4)
 1ca:	c9 01       	movw	r24, r18
 1cc:	62 e0       	ldi	r22, 0x02	; 2
 1ce:	70 e0       	ldi	r23, 0x00	; 0
 1d0:	97 d2       	rcall	.+1326   	; 0x700 <__divmodhi4>
 1d2:	e6 17       	cp	r30, r22
 1d4:	f7 07       	cpc	r31, r23
 1d6:	14 f4       	brge	.+4      	; 0x1dc <indicateValue+0x2a>
	{
		PORTD |= 1;
 1d8:	90 9a       	sbi	0x12, 0	; 18
 1da:	08 95       	ret
	}
	else if (val < 3 * max / 4)
 1dc:	c9 01       	movw	r24, r18
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	82 0f       	add	r24, r18
 1e4:	93 1f       	adc	r25, r19
 1e6:	64 e0       	ldi	r22, 0x04	; 4
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	8a d2       	rcall	.+1300   	; 0x700 <__divmodhi4>
 1ec:	e6 17       	cp	r30, r22
 1ee:	f7 07       	cpc	r31, r23
 1f0:	14 f4       	brge	.+4      	; 0x1f6 <indicateValue+0x44>
	{
		PORTD |= 2;
 1f2:	91 9a       	sbi	0x12, 1	; 18
 1f4:	08 95       	ret
	}
	else
	{
		PORTD |= 4;
 1f6:	92 9a       	sbi	0x12, 2	; 18
 1f8:	08 95       	ret

000001fa <main>:
void setRightMotorPwm(int value);



int main(void)
{
 1fa:	af 92       	push	r10
 1fc:	bf 92       	push	r11
 1fe:	cf 92       	push	r12
 200:	df 92       	push	r13
 202:	ef 92       	push	r14
 204:	ff 92       	push	r15
 206:	0f 93       	push	r16
 208:	1f 93       	push	r17
 20a:	cf 93       	push	r28
 20c:	df 93       	push	r29
	initialize();
 20e:	27 df       	rcall	.-434    	; 0x5e <initialize>
 210:	c0 e0       	ldi	r28, 0x00	; 0
 212:	d0 e0       	ldi	r29, 0x00	; 0
 214:	0f 2e       	mov	r0, r31
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	ef 2e       	mov	r14, r31
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	ff 2e       	mov	r15, r31
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	0f 2f       	mov	r16, r31
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	1f 2f       	mov	r17, r31
 226:	f0 2d       	mov	r31, r0
 228:	cc 24       	eor	r12, r12
 22a:	dd 24       	eor	r13, r13
	
	int steeringPart = 0;

	while(1)
	{
		updateSensors();
 22c:	35 df       	rcall	.-406    	; 0x98 <updateSensors>
	for(int i = 0; i < 7; ++i)
		result += (sensors & (1 << ( 6- i))) ? k[i] : 0;
		
	return result;*/
	
	return k[activeSensor];
 22e:	e0 91 74 00 	lds	r30, 0x0074
 232:	f0 91 75 00 	lds	r31, 0x0075
 236:	ee 0f       	add	r30, r30
 238:	ff 1f       	adc	r31, r31
 23a:	e0 5a       	subi	r30, 0xA0	; 160
 23c:	ff 4f       	sbci	r31, 0xFF	; 255
 23e:	a0 80       	ld	r10, Z
 240:	b1 80       	ldd	r11, Z+1	; 0x01
		//diodesDiagnose();
		
		previous_read = current_read;
		current_read = getSteeringValue();
		
		diffPart = diffPart * 0.99 + (current_read - previous_read) * kD;
 242:	c8 01       	movw	r24, r16
 244:	b7 01       	movw	r22, r14
 246:	24 ea       	ldi	r18, 0xA4	; 164
 248:	30 e7       	ldi	r19, 0x70	; 112
 24a:	4d e7       	ldi	r20, 0x7D	; 125
 24c:	5f e3       	ldi	r21, 0x3F	; 63
 24e:	f5 d1       	rcall	.+1002   	; 0x63a <__mulsf3>
 250:	7b 01       	movw	r14, r22
 252:	8c 01       	movw	r16, r24
 254:	95 01       	movw	r18, r10
 256:	2c 1b       	sub	r18, r28
 258:	3d 0b       	sbc	r19, r29
 25a:	80 91 70 00 	lds	r24, 0x0070
 25e:	90 91 71 00 	lds	r25, 0x0071
 262:	28 9f       	mul	r18, r24
 264:	b0 01       	movw	r22, r0
 266:	29 9f       	mul	r18, r25
 268:	70 0d       	add	r23, r0
 26a:	38 9f       	mul	r19, r24
 26c:	70 0d       	add	r23, r0
 26e:	11 24       	eor	r1, r1
 270:	88 27       	eor	r24, r24
 272:	77 fd       	sbrc	r23, 7
 274:	80 95       	com	r24
 276:	98 2f       	mov	r25, r24
 278:	54 d1       	rcall	.+680    	; 0x522 <__floatsisf>
 27a:	9b 01       	movw	r18, r22
 27c:	ac 01       	movw	r20, r24
 27e:	c8 01       	movw	r24, r16
 280:	b7 01       	movw	r22, r14
 282:	50 d0       	rcall	.+160    	; 0x324 <__addsf3>
 284:	7b 01       	movw	r14, r22
 286:	8c 01       	movw	r16, r24
		
		intPart += current_read * kI;
 288:	80 91 72 00 	lds	r24, 0x0072
 28c:	90 91 73 00 	lds	r25, 0x0073
 290:	a8 9e       	mul	r10, r24
 292:	90 01       	movw	r18, r0
 294:	a9 9e       	mul	r10, r25
 296:	30 0d       	add	r19, r0
 298:	b8 9e       	mul	r11, r24
 29a:	30 0d       	add	r19, r0
 29c:	11 24       	eor	r1, r1
 29e:	2c 0d       	add	r18, r12
 2a0:	3d 1d       	adc	r19, r13
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	25 3f       	cpi	r18, 0xF5	; 245
 2a6:	38 07       	cpc	r19, r24
 2a8:	14 f0       	brlt	.+4      	; 0x2ae <main+0xb4>
 2aa:	24 ef       	ldi	r18, 0xF4	; 244
 2ac:	31 e0       	ldi	r19, 0x01	; 1
 2ae:	69 01       	movw	r12, r18
 2b0:	8e ef       	ldi	r24, 0xFE	; 254
 2b2:	2c 30       	cpi	r18, 0x0C	; 12
 2b4:	38 07       	cpc	r19, r24
 2b6:	24 f4       	brge	.+8      	; 0x2c0 <main+0xc6>
 2b8:	5c e0       	ldi	r21, 0x0C	; 12
 2ba:	c5 2e       	mov	r12, r21
 2bc:	5e ef       	ldi	r21, 0xFE	; 254
 2be:	d5 2e       	mov	r13, r21
		else if (intPart > 500)
			intPart = 500;
		
		propPart = current_read * kP;
		
		steeringPart = (int)(diffPart) + intPart + propPart;
 2c0:	80 91 6e 00 	lds	r24, 0x006E
 2c4:	90 91 6f 00 	lds	r25, 0x006F
 2c8:	a8 9e       	mul	r10, r24
 2ca:	e0 01       	movw	r28, r0
 2cc:	a9 9e       	mul	r10, r25
 2ce:	d0 0d       	add	r29, r0
 2d0:	b8 9e       	mul	r11, r24
 2d2:	d0 0d       	add	r29, r0
 2d4:	11 24       	eor	r1, r1
 2d6:	cc 0d       	add	r28, r12
 2d8:	dd 1d       	adc	r29, r13
 2da:	c8 01       	movw	r24, r16
 2dc:	b7 01       	movw	r22, r14
 2de:	ee d0       	rcall	.+476    	; 0x4bc <__fixsfsi>
 2e0:	c6 0f       	add	r28, r22
 2e2:	d7 1f       	adc	r29, r23
		
		if(steeringPart > 0)
 2e4:	1c 16       	cp	r1, r28
 2e6:	1d 06       	cpc	r1, r29
 2e8:	64 f4       	brge	.+24     	; 0x302 <main+0x108>
		{
			indicateValue(steeringPart, 1000);
 2ea:	ce 01       	movw	r24, r28
 2ec:	68 ee       	ldi	r22, 0xE8	; 232
 2ee:	73 e0       	ldi	r23, 0x03	; 3
 2f0:	60 df       	rcall	.-320    	; 0x1b2 <indicateValue>
			
			setRightMotorPwm(1000 - steeringPart);
 2f2:	88 ee       	ldi	r24, 0xE8	; 232
 2f4:	93 e0       	ldi	r25, 0x03	; 3
 2f6:	8c 1b       	sub	r24, r28
 2f8:	9d 0b       	sbc	r25, r29
 2fa:	27 df       	rcall	.-434    	; 0x14a <setRightMotorPwm>
			setLeftMotorPwm(1000);
 2fc:	88 ee       	ldi	r24, 0xE8	; 232
 2fe:	93 e0       	ldi	r25, 0x03	; 3
 300:	0d c0       	rjmp	.+26     	; 0x31c <main+0x122>
		}
		else
		{
			indicateValue(-steeringPart, 1000);
 302:	88 27       	eor	r24, r24
 304:	99 27       	eor	r25, r25
 306:	8c 1b       	sub	r24, r28
 308:	9d 0b       	sbc	r25, r29
 30a:	68 ee       	ldi	r22, 0xE8	; 232
 30c:	73 e0       	ldi	r23, 0x03	; 3
 30e:	51 df       	rcall	.-350    	; 0x1b2 <indicateValue>
			
			setRightMotorPwm(1000);
 310:	88 ee       	ldi	r24, 0xE8	; 232
 312:	93 e0       	ldi	r25, 0x03	; 3
 314:	1a df       	rcall	.-460    	; 0x14a <setRightMotorPwm>
			setLeftMotorPwm(1000 + steeringPart);
 316:	ce 01       	movw	r24, r28
 318:	88 51       	subi	r24, 0x18	; 24
 31a:	9c 4f       	sbci	r25, 0xFC	; 252
 31c:	ff de       	rcall	.-514    	; 0x11c <setLeftMotorPwm>



int main(void)
{
	initialize();
 31e:	e5 01       	movw	r28, r10
 320:	85 cf       	rjmp	.-246    	; 0x22c <main+0x32>

00000322 <__subsf3>:
 322:	50 58       	subi	r21, 0x80	; 128

00000324 <__addsf3>:
 324:	bb 27       	eor	r27, r27
 326:	aa 27       	eor	r26, r26
 328:	0e d0       	rcall	.+28     	; 0x346 <__addsf3x>
 32a:	4d c1       	rjmp	.+666    	; 0x5c6 <__fp_round>
 32c:	3e d1       	rcall	.+636    	; 0x5aa <__fp_pscA>
 32e:	30 f0       	brcs	.+12     	; 0x33c <__addsf3+0x18>
 330:	43 d1       	rcall	.+646    	; 0x5b8 <__fp_pscB>
 332:	20 f0       	brcs	.+8      	; 0x33c <__addsf3+0x18>
 334:	31 f4       	brne	.+12     	; 0x342 <__addsf3+0x1e>
 336:	9f 3f       	cpi	r25, 0xFF	; 255
 338:	11 f4       	brne	.+4      	; 0x33e <__addsf3+0x1a>
 33a:	1e f4       	brtc	.+6      	; 0x342 <__addsf3+0x1e>
 33c:	33 c1       	rjmp	.+614    	; 0x5a4 <__fp_nan>
 33e:	0e f4       	brtc	.+2      	; 0x342 <__addsf3+0x1e>
 340:	e0 95       	com	r30
 342:	e7 fb       	bst	r30, 7
 344:	29 c1       	rjmp	.+594    	; 0x598 <__fp_inf>

00000346 <__addsf3x>:
 346:	e9 2f       	mov	r30, r25
 348:	4f d1       	rcall	.+670    	; 0x5e8 <__fp_split3>
 34a:	80 f3       	brcs	.-32     	; 0x32c <__addsf3+0x8>
 34c:	ba 17       	cp	r27, r26
 34e:	62 07       	cpc	r22, r18
 350:	73 07       	cpc	r23, r19
 352:	84 07       	cpc	r24, r20
 354:	95 07       	cpc	r25, r21
 356:	18 f0       	brcs	.+6      	; 0x35e <__addsf3x+0x18>
 358:	71 f4       	brne	.+28     	; 0x376 <__addsf3x+0x30>
 35a:	9e f5       	brtc	.+102    	; 0x3c2 <__addsf3x+0x7c>
 35c:	67 c1       	rjmp	.+718    	; 0x62c <__fp_zero>
 35e:	0e f4       	brtc	.+2      	; 0x362 <__addsf3x+0x1c>
 360:	e0 95       	com	r30
 362:	0b 2e       	mov	r0, r27
 364:	ba 2f       	mov	r27, r26
 366:	a0 2d       	mov	r26, r0
 368:	0b 01       	movw	r0, r22
 36a:	b9 01       	movw	r22, r18
 36c:	90 01       	movw	r18, r0
 36e:	0c 01       	movw	r0, r24
 370:	ca 01       	movw	r24, r20
 372:	a0 01       	movw	r20, r0
 374:	11 24       	eor	r1, r1
 376:	ff 27       	eor	r31, r31
 378:	59 1b       	sub	r21, r25
 37a:	99 f0       	breq	.+38     	; 0x3a2 <__addsf3x+0x5c>
 37c:	59 3f       	cpi	r21, 0xF9	; 249
 37e:	50 f4       	brcc	.+20     	; 0x394 <__addsf3x+0x4e>
 380:	50 3e       	cpi	r21, 0xE0	; 224
 382:	68 f1       	brcs	.+90     	; 0x3de <__addsf3x+0x98>
 384:	1a 16       	cp	r1, r26
 386:	f0 40       	sbci	r31, 0x00	; 0
 388:	a2 2f       	mov	r26, r18
 38a:	23 2f       	mov	r18, r19
 38c:	34 2f       	mov	r19, r20
 38e:	44 27       	eor	r20, r20
 390:	58 5f       	subi	r21, 0xF8	; 248
 392:	f3 cf       	rjmp	.-26     	; 0x37a <__addsf3x+0x34>
 394:	46 95       	lsr	r20
 396:	37 95       	ror	r19
 398:	27 95       	ror	r18
 39a:	a7 95       	ror	r26
 39c:	f0 40       	sbci	r31, 0x00	; 0
 39e:	53 95       	inc	r21
 3a0:	c9 f7       	brne	.-14     	; 0x394 <__addsf3x+0x4e>
 3a2:	7e f4       	brtc	.+30     	; 0x3c2 <__addsf3x+0x7c>
 3a4:	1f 16       	cp	r1, r31
 3a6:	ba 0b       	sbc	r27, r26
 3a8:	62 0b       	sbc	r22, r18
 3aa:	73 0b       	sbc	r23, r19
 3ac:	84 0b       	sbc	r24, r20
 3ae:	ba f0       	brmi	.+46     	; 0x3de <__addsf3x+0x98>
 3b0:	91 50       	subi	r25, 0x01	; 1
 3b2:	a1 f0       	breq	.+40     	; 0x3dc <__addsf3x+0x96>
 3b4:	ff 0f       	add	r31, r31
 3b6:	bb 1f       	adc	r27, r27
 3b8:	66 1f       	adc	r22, r22
 3ba:	77 1f       	adc	r23, r23
 3bc:	88 1f       	adc	r24, r24
 3be:	c2 f7       	brpl	.-16     	; 0x3b0 <__addsf3x+0x6a>
 3c0:	0e c0       	rjmp	.+28     	; 0x3de <__addsf3x+0x98>
 3c2:	ba 0f       	add	r27, r26
 3c4:	62 1f       	adc	r22, r18
 3c6:	73 1f       	adc	r23, r19
 3c8:	84 1f       	adc	r24, r20
 3ca:	48 f4       	brcc	.+18     	; 0x3de <__addsf3x+0x98>
 3cc:	87 95       	ror	r24
 3ce:	77 95       	ror	r23
 3d0:	67 95       	ror	r22
 3d2:	b7 95       	ror	r27
 3d4:	f7 95       	ror	r31
 3d6:	9e 3f       	cpi	r25, 0xFE	; 254
 3d8:	08 f0       	brcs	.+2      	; 0x3dc <__addsf3x+0x96>
 3da:	b3 cf       	rjmp	.-154    	; 0x342 <__addsf3+0x1e>
 3dc:	93 95       	inc	r25
 3de:	88 0f       	add	r24, r24
 3e0:	08 f0       	brcs	.+2      	; 0x3e4 <__addsf3x+0x9e>
 3e2:	99 27       	eor	r25, r25
 3e4:	ee 0f       	add	r30, r30
 3e6:	97 95       	ror	r25
 3e8:	87 95       	ror	r24
 3ea:	08 95       	ret

000003ec <__divsf3>:
 3ec:	0c d0       	rcall	.+24     	; 0x406 <__divsf3x>
 3ee:	eb c0       	rjmp	.+470    	; 0x5c6 <__fp_round>
 3f0:	e3 d0       	rcall	.+454    	; 0x5b8 <__fp_pscB>
 3f2:	40 f0       	brcs	.+16     	; 0x404 <__divsf3+0x18>
 3f4:	da d0       	rcall	.+436    	; 0x5aa <__fp_pscA>
 3f6:	30 f0       	brcs	.+12     	; 0x404 <__divsf3+0x18>
 3f8:	21 f4       	brne	.+8      	; 0x402 <__divsf3+0x16>
 3fa:	5f 3f       	cpi	r21, 0xFF	; 255
 3fc:	19 f0       	breq	.+6      	; 0x404 <__divsf3+0x18>
 3fe:	cc c0       	rjmp	.+408    	; 0x598 <__fp_inf>
 400:	51 11       	cpse	r21, r1
 402:	15 c1       	rjmp	.+554    	; 0x62e <__fp_szero>
 404:	cf c0       	rjmp	.+414    	; 0x5a4 <__fp_nan>

00000406 <__divsf3x>:
 406:	f0 d0       	rcall	.+480    	; 0x5e8 <__fp_split3>
 408:	98 f3       	brcs	.-26     	; 0x3f0 <__divsf3+0x4>

0000040a <__divsf3_pse>:
 40a:	99 23       	and	r25, r25
 40c:	c9 f3       	breq	.-14     	; 0x400 <__divsf3+0x14>
 40e:	55 23       	and	r21, r21
 410:	b1 f3       	breq	.-20     	; 0x3fe <__divsf3+0x12>
 412:	95 1b       	sub	r25, r21
 414:	55 0b       	sbc	r21, r21
 416:	bb 27       	eor	r27, r27
 418:	aa 27       	eor	r26, r26
 41a:	62 17       	cp	r22, r18
 41c:	73 07       	cpc	r23, r19
 41e:	84 07       	cpc	r24, r20
 420:	38 f0       	brcs	.+14     	; 0x430 <__divsf3_pse+0x26>
 422:	9f 5f       	subi	r25, 0xFF	; 255
 424:	5f 4f       	sbci	r21, 0xFF	; 255
 426:	22 0f       	add	r18, r18
 428:	33 1f       	adc	r19, r19
 42a:	44 1f       	adc	r20, r20
 42c:	aa 1f       	adc	r26, r26
 42e:	a9 f3       	breq	.-22     	; 0x41a <__divsf3_pse+0x10>
 430:	33 d0       	rcall	.+102    	; 0x498 <__stack+0x39>
 432:	0e 2e       	mov	r0, r30
 434:	3a f0       	brmi	.+14     	; 0x444 <__divsf3_pse+0x3a>
 436:	e0 e8       	ldi	r30, 0x80	; 128
 438:	30 d0       	rcall	.+96     	; 0x49a <__stack+0x3b>
 43a:	91 50       	subi	r25, 0x01	; 1
 43c:	50 40       	sbci	r21, 0x00	; 0
 43e:	e6 95       	lsr	r30
 440:	00 1c       	adc	r0, r0
 442:	ca f7       	brpl	.-14     	; 0x436 <__divsf3_pse+0x2c>
 444:	29 d0       	rcall	.+82     	; 0x498 <__stack+0x39>
 446:	fe 2f       	mov	r31, r30
 448:	27 d0       	rcall	.+78     	; 0x498 <__stack+0x39>
 44a:	66 0f       	add	r22, r22
 44c:	77 1f       	adc	r23, r23
 44e:	88 1f       	adc	r24, r24
 450:	bb 1f       	adc	r27, r27
 452:	26 17       	cp	r18, r22
 454:	37 07       	cpc	r19, r23
 456:	48 07       	cpc	r20, r24
 458:	ab 07       	cpc	r26, r27
 45a:	b0 e8       	ldi	r27, 0x80	; 128
 45c:	09 f0       	breq	.+2      	; 0x460 <__stack+0x1>
 45e:	bb 0b       	sbc	r27, r27
 460:	80 2d       	mov	r24, r0
 462:	bf 01       	movw	r22, r30
 464:	ff 27       	eor	r31, r31
 466:	93 58       	subi	r25, 0x83	; 131
 468:	5f 4f       	sbci	r21, 0xFF	; 255
 46a:	2a f0       	brmi	.+10     	; 0x476 <__stack+0x17>
 46c:	9e 3f       	cpi	r25, 0xFE	; 254
 46e:	51 05       	cpc	r21, r1
 470:	68 f0       	brcs	.+26     	; 0x48c <__stack+0x2d>
 472:	92 c0       	rjmp	.+292    	; 0x598 <__fp_inf>
 474:	dc c0       	rjmp	.+440    	; 0x62e <__fp_szero>
 476:	5f 3f       	cpi	r21, 0xFF	; 255
 478:	ec f3       	brlt	.-6      	; 0x474 <__stack+0x15>
 47a:	98 3e       	cpi	r25, 0xE8	; 232
 47c:	dc f3       	brlt	.-10     	; 0x474 <__stack+0x15>
 47e:	86 95       	lsr	r24
 480:	77 95       	ror	r23
 482:	67 95       	ror	r22
 484:	b7 95       	ror	r27
 486:	f7 95       	ror	r31
 488:	9f 5f       	subi	r25, 0xFF	; 255
 48a:	c9 f7       	brne	.-14     	; 0x47e <__stack+0x1f>
 48c:	88 0f       	add	r24, r24
 48e:	91 1d       	adc	r25, r1
 490:	96 95       	lsr	r25
 492:	87 95       	ror	r24
 494:	97 f9       	bld	r25, 7
 496:	08 95       	ret
 498:	e1 e0       	ldi	r30, 0x01	; 1
 49a:	66 0f       	add	r22, r22
 49c:	77 1f       	adc	r23, r23
 49e:	88 1f       	adc	r24, r24
 4a0:	bb 1f       	adc	r27, r27
 4a2:	62 17       	cp	r22, r18
 4a4:	73 07       	cpc	r23, r19
 4a6:	84 07       	cpc	r24, r20
 4a8:	ba 07       	cpc	r27, r26
 4aa:	20 f0       	brcs	.+8      	; 0x4b4 <__stack+0x55>
 4ac:	62 1b       	sub	r22, r18
 4ae:	73 0b       	sbc	r23, r19
 4b0:	84 0b       	sbc	r24, r20
 4b2:	ba 0b       	sbc	r27, r26
 4b4:	ee 1f       	adc	r30, r30
 4b6:	88 f7       	brcc	.-30     	; 0x49a <__stack+0x3b>
 4b8:	e0 95       	com	r30
 4ba:	08 95       	ret

000004bc <__fixsfsi>:
 4bc:	04 d0       	rcall	.+8      	; 0x4c6 <__fixunssfsi>
 4be:	68 94       	set
 4c0:	b1 11       	cpse	r27, r1
 4c2:	b5 c0       	rjmp	.+362    	; 0x62e <__fp_szero>
 4c4:	08 95       	ret

000004c6 <__fixunssfsi>:
 4c6:	98 d0       	rcall	.+304    	; 0x5f8 <__fp_splitA>
 4c8:	88 f0       	brcs	.+34     	; 0x4ec <__fixunssfsi+0x26>
 4ca:	9f 57       	subi	r25, 0x7F	; 127
 4cc:	90 f0       	brcs	.+36     	; 0x4f2 <__fixunssfsi+0x2c>
 4ce:	b9 2f       	mov	r27, r25
 4d0:	99 27       	eor	r25, r25
 4d2:	b7 51       	subi	r27, 0x17	; 23
 4d4:	a0 f0       	brcs	.+40     	; 0x4fe <__fixunssfsi+0x38>
 4d6:	d1 f0       	breq	.+52     	; 0x50c <__fixunssfsi+0x46>
 4d8:	66 0f       	add	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	88 1f       	adc	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	1a f0       	brmi	.+6      	; 0x4e8 <__fixunssfsi+0x22>
 4e2:	ba 95       	dec	r27
 4e4:	c9 f7       	brne	.-14     	; 0x4d8 <__fixunssfsi+0x12>
 4e6:	12 c0       	rjmp	.+36     	; 0x50c <__fixunssfsi+0x46>
 4e8:	b1 30       	cpi	r27, 0x01	; 1
 4ea:	81 f0       	breq	.+32     	; 0x50c <__fixunssfsi+0x46>
 4ec:	9f d0       	rcall	.+318    	; 0x62c <__fp_zero>
 4ee:	b1 e0       	ldi	r27, 0x01	; 1
 4f0:	08 95       	ret
 4f2:	9c c0       	rjmp	.+312    	; 0x62c <__fp_zero>
 4f4:	67 2f       	mov	r22, r23
 4f6:	78 2f       	mov	r23, r24
 4f8:	88 27       	eor	r24, r24
 4fa:	b8 5f       	subi	r27, 0xF8	; 248
 4fc:	39 f0       	breq	.+14     	; 0x50c <__fixunssfsi+0x46>
 4fe:	b9 3f       	cpi	r27, 0xF9	; 249
 500:	cc f3       	brlt	.-14     	; 0x4f4 <__fixunssfsi+0x2e>
 502:	86 95       	lsr	r24
 504:	77 95       	ror	r23
 506:	67 95       	ror	r22
 508:	b3 95       	inc	r27
 50a:	d9 f7       	brne	.-10     	; 0x502 <__fixunssfsi+0x3c>
 50c:	3e f4       	brtc	.+14     	; 0x51c <__fixunssfsi+0x56>
 50e:	90 95       	com	r25
 510:	80 95       	com	r24
 512:	70 95       	com	r23
 514:	61 95       	neg	r22
 516:	7f 4f       	sbci	r23, 0xFF	; 255
 518:	8f 4f       	sbci	r24, 0xFF	; 255
 51a:	9f 4f       	sbci	r25, 0xFF	; 255
 51c:	08 95       	ret

0000051e <__floatunsisf>:
 51e:	e8 94       	clt
 520:	09 c0       	rjmp	.+18     	; 0x534 <__floatsisf+0x12>

00000522 <__floatsisf>:
 522:	97 fb       	bst	r25, 7
 524:	3e f4       	brtc	.+14     	; 0x534 <__floatsisf+0x12>
 526:	90 95       	com	r25
 528:	80 95       	com	r24
 52a:	70 95       	com	r23
 52c:	61 95       	neg	r22
 52e:	7f 4f       	sbci	r23, 0xFF	; 255
 530:	8f 4f       	sbci	r24, 0xFF	; 255
 532:	9f 4f       	sbci	r25, 0xFF	; 255
 534:	99 23       	and	r25, r25
 536:	a9 f0       	breq	.+42     	; 0x562 <__floatsisf+0x40>
 538:	f9 2f       	mov	r31, r25
 53a:	96 e9       	ldi	r25, 0x96	; 150
 53c:	bb 27       	eor	r27, r27
 53e:	93 95       	inc	r25
 540:	f6 95       	lsr	r31
 542:	87 95       	ror	r24
 544:	77 95       	ror	r23
 546:	67 95       	ror	r22
 548:	b7 95       	ror	r27
 54a:	f1 11       	cpse	r31, r1
 54c:	f8 cf       	rjmp	.-16     	; 0x53e <__floatsisf+0x1c>
 54e:	fa f4       	brpl	.+62     	; 0x58e <__floatsisf+0x6c>
 550:	bb 0f       	add	r27, r27
 552:	11 f4       	brne	.+4      	; 0x558 <__floatsisf+0x36>
 554:	60 ff       	sbrs	r22, 0
 556:	1b c0       	rjmp	.+54     	; 0x58e <__floatsisf+0x6c>
 558:	6f 5f       	subi	r22, 0xFF	; 255
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	8f 4f       	sbci	r24, 0xFF	; 255
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	16 c0       	rjmp	.+44     	; 0x58e <__floatsisf+0x6c>
 562:	88 23       	and	r24, r24
 564:	11 f0       	breq	.+4      	; 0x56a <__floatsisf+0x48>
 566:	96 e9       	ldi	r25, 0x96	; 150
 568:	11 c0       	rjmp	.+34     	; 0x58c <__floatsisf+0x6a>
 56a:	77 23       	and	r23, r23
 56c:	21 f0       	breq	.+8      	; 0x576 <__floatsisf+0x54>
 56e:	9e e8       	ldi	r25, 0x8E	; 142
 570:	87 2f       	mov	r24, r23
 572:	76 2f       	mov	r23, r22
 574:	05 c0       	rjmp	.+10     	; 0x580 <__floatsisf+0x5e>
 576:	66 23       	and	r22, r22
 578:	71 f0       	breq	.+28     	; 0x596 <__floatsisf+0x74>
 57a:	96 e8       	ldi	r25, 0x86	; 134
 57c:	86 2f       	mov	r24, r22
 57e:	70 e0       	ldi	r23, 0x00	; 0
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	2a f0       	brmi	.+10     	; 0x58e <__floatsisf+0x6c>
 584:	9a 95       	dec	r25
 586:	66 0f       	add	r22, r22
 588:	77 1f       	adc	r23, r23
 58a:	88 1f       	adc	r24, r24
 58c:	da f7       	brpl	.-10     	; 0x584 <__floatsisf+0x62>
 58e:	88 0f       	add	r24, r24
 590:	96 95       	lsr	r25
 592:	87 95       	ror	r24
 594:	97 f9       	bld	r25, 7
 596:	08 95       	ret

00000598 <__fp_inf>:
 598:	97 f9       	bld	r25, 7
 59a:	9f 67       	ori	r25, 0x7F	; 127
 59c:	80 e8       	ldi	r24, 0x80	; 128
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	08 95       	ret

000005a4 <__fp_nan>:
 5a4:	9f ef       	ldi	r25, 0xFF	; 255
 5a6:	80 ec       	ldi	r24, 0xC0	; 192
 5a8:	08 95       	ret

000005aa <__fp_pscA>:
 5aa:	00 24       	eor	r0, r0
 5ac:	0a 94       	dec	r0
 5ae:	16 16       	cp	r1, r22
 5b0:	17 06       	cpc	r1, r23
 5b2:	18 06       	cpc	r1, r24
 5b4:	09 06       	cpc	r0, r25
 5b6:	08 95       	ret

000005b8 <__fp_pscB>:
 5b8:	00 24       	eor	r0, r0
 5ba:	0a 94       	dec	r0
 5bc:	12 16       	cp	r1, r18
 5be:	13 06       	cpc	r1, r19
 5c0:	14 06       	cpc	r1, r20
 5c2:	05 06       	cpc	r0, r21
 5c4:	08 95       	ret

000005c6 <__fp_round>:
 5c6:	09 2e       	mov	r0, r25
 5c8:	03 94       	inc	r0
 5ca:	00 0c       	add	r0, r0
 5cc:	11 f4       	brne	.+4      	; 0x5d2 <__fp_round+0xc>
 5ce:	88 23       	and	r24, r24
 5d0:	52 f0       	brmi	.+20     	; 0x5e6 <__fp_round+0x20>
 5d2:	bb 0f       	add	r27, r27
 5d4:	40 f4       	brcc	.+16     	; 0x5e6 <__fp_round+0x20>
 5d6:	bf 2b       	or	r27, r31
 5d8:	11 f4       	brne	.+4      	; 0x5de <__fp_round+0x18>
 5da:	60 ff       	sbrs	r22, 0
 5dc:	04 c0       	rjmp	.+8      	; 0x5e6 <__fp_round+0x20>
 5de:	6f 5f       	subi	r22, 0xFF	; 255
 5e0:	7f 4f       	sbci	r23, 0xFF	; 255
 5e2:	8f 4f       	sbci	r24, 0xFF	; 255
 5e4:	9f 4f       	sbci	r25, 0xFF	; 255
 5e6:	08 95       	ret

000005e8 <__fp_split3>:
 5e8:	57 fd       	sbrc	r21, 7
 5ea:	90 58       	subi	r25, 0x80	; 128
 5ec:	44 0f       	add	r20, r20
 5ee:	55 1f       	adc	r21, r21
 5f0:	59 f0       	breq	.+22     	; 0x608 <__fp_splitA+0x10>
 5f2:	5f 3f       	cpi	r21, 0xFF	; 255
 5f4:	71 f0       	breq	.+28     	; 0x612 <__fp_splitA+0x1a>
 5f6:	47 95       	ror	r20

000005f8 <__fp_splitA>:
 5f8:	88 0f       	add	r24, r24
 5fa:	97 fb       	bst	r25, 7
 5fc:	99 1f       	adc	r25, r25
 5fe:	61 f0       	breq	.+24     	; 0x618 <__fp_splitA+0x20>
 600:	9f 3f       	cpi	r25, 0xFF	; 255
 602:	79 f0       	breq	.+30     	; 0x622 <__fp_splitA+0x2a>
 604:	87 95       	ror	r24
 606:	08 95       	ret
 608:	12 16       	cp	r1, r18
 60a:	13 06       	cpc	r1, r19
 60c:	14 06       	cpc	r1, r20
 60e:	55 1f       	adc	r21, r21
 610:	f2 cf       	rjmp	.-28     	; 0x5f6 <__fp_split3+0xe>
 612:	46 95       	lsr	r20
 614:	f1 df       	rcall	.-30     	; 0x5f8 <__fp_splitA>
 616:	08 c0       	rjmp	.+16     	; 0x628 <__fp_splitA+0x30>
 618:	16 16       	cp	r1, r22
 61a:	17 06       	cpc	r1, r23
 61c:	18 06       	cpc	r1, r24
 61e:	99 1f       	adc	r25, r25
 620:	f1 cf       	rjmp	.-30     	; 0x604 <__fp_splitA+0xc>
 622:	86 95       	lsr	r24
 624:	71 05       	cpc	r23, r1
 626:	61 05       	cpc	r22, r1
 628:	08 94       	sec
 62a:	08 95       	ret

0000062c <__fp_zero>:
 62c:	e8 94       	clt

0000062e <__fp_szero>:
 62e:	bb 27       	eor	r27, r27
 630:	66 27       	eor	r22, r22
 632:	77 27       	eor	r23, r23
 634:	cb 01       	movw	r24, r22
 636:	97 f9       	bld	r25, 7
 638:	08 95       	ret

0000063a <__mulsf3>:
 63a:	0b d0       	rcall	.+22     	; 0x652 <__mulsf3x>
 63c:	c4 cf       	rjmp	.-120    	; 0x5c6 <__fp_round>
 63e:	b5 df       	rcall	.-150    	; 0x5aa <__fp_pscA>
 640:	28 f0       	brcs	.+10     	; 0x64c <__mulsf3+0x12>
 642:	ba df       	rcall	.-140    	; 0x5b8 <__fp_pscB>
 644:	18 f0       	brcs	.+6      	; 0x64c <__mulsf3+0x12>
 646:	95 23       	and	r25, r21
 648:	09 f0       	breq	.+2      	; 0x64c <__mulsf3+0x12>
 64a:	a6 cf       	rjmp	.-180    	; 0x598 <__fp_inf>
 64c:	ab cf       	rjmp	.-170    	; 0x5a4 <__fp_nan>
 64e:	11 24       	eor	r1, r1
 650:	ee cf       	rjmp	.-36     	; 0x62e <__fp_szero>

00000652 <__mulsf3x>:
 652:	ca df       	rcall	.-108    	; 0x5e8 <__fp_split3>
 654:	a0 f3       	brcs	.-24     	; 0x63e <__mulsf3+0x4>

00000656 <__mulsf3_pse>:
 656:	95 9f       	mul	r25, r21
 658:	d1 f3       	breq	.-12     	; 0x64e <__mulsf3+0x14>
 65a:	95 0f       	add	r25, r21
 65c:	50 e0       	ldi	r21, 0x00	; 0
 65e:	55 1f       	adc	r21, r21
 660:	62 9f       	mul	r22, r18
 662:	f0 01       	movw	r30, r0
 664:	72 9f       	mul	r23, r18
 666:	bb 27       	eor	r27, r27
 668:	f0 0d       	add	r31, r0
 66a:	b1 1d       	adc	r27, r1
 66c:	63 9f       	mul	r22, r19
 66e:	aa 27       	eor	r26, r26
 670:	f0 0d       	add	r31, r0
 672:	b1 1d       	adc	r27, r1
 674:	aa 1f       	adc	r26, r26
 676:	64 9f       	mul	r22, r20
 678:	66 27       	eor	r22, r22
 67a:	b0 0d       	add	r27, r0
 67c:	a1 1d       	adc	r26, r1
 67e:	66 1f       	adc	r22, r22
 680:	82 9f       	mul	r24, r18
 682:	22 27       	eor	r18, r18
 684:	b0 0d       	add	r27, r0
 686:	a1 1d       	adc	r26, r1
 688:	62 1f       	adc	r22, r18
 68a:	73 9f       	mul	r23, r19
 68c:	b0 0d       	add	r27, r0
 68e:	a1 1d       	adc	r26, r1
 690:	62 1f       	adc	r22, r18
 692:	83 9f       	mul	r24, r19
 694:	a0 0d       	add	r26, r0
 696:	61 1d       	adc	r22, r1
 698:	22 1f       	adc	r18, r18
 69a:	74 9f       	mul	r23, r20
 69c:	33 27       	eor	r19, r19
 69e:	a0 0d       	add	r26, r0
 6a0:	61 1d       	adc	r22, r1
 6a2:	23 1f       	adc	r18, r19
 6a4:	84 9f       	mul	r24, r20
 6a6:	60 0d       	add	r22, r0
 6a8:	21 1d       	adc	r18, r1
 6aa:	82 2f       	mov	r24, r18
 6ac:	76 2f       	mov	r23, r22
 6ae:	6a 2f       	mov	r22, r26
 6b0:	11 24       	eor	r1, r1
 6b2:	9f 57       	subi	r25, 0x7F	; 127
 6b4:	50 40       	sbci	r21, 0x00	; 0
 6b6:	8a f0       	brmi	.+34     	; 0x6da <__mulsf3_pse+0x84>
 6b8:	e1 f0       	breq	.+56     	; 0x6f2 <__mulsf3_pse+0x9c>
 6ba:	88 23       	and	r24, r24
 6bc:	4a f0       	brmi	.+18     	; 0x6d0 <__mulsf3_pse+0x7a>
 6be:	ee 0f       	add	r30, r30
 6c0:	ff 1f       	adc	r31, r31
 6c2:	bb 1f       	adc	r27, r27
 6c4:	66 1f       	adc	r22, r22
 6c6:	77 1f       	adc	r23, r23
 6c8:	88 1f       	adc	r24, r24
 6ca:	91 50       	subi	r25, 0x01	; 1
 6cc:	50 40       	sbci	r21, 0x00	; 0
 6ce:	a9 f7       	brne	.-22     	; 0x6ba <__mulsf3_pse+0x64>
 6d0:	9e 3f       	cpi	r25, 0xFE	; 254
 6d2:	51 05       	cpc	r21, r1
 6d4:	70 f0       	brcs	.+28     	; 0x6f2 <__mulsf3_pse+0x9c>
 6d6:	60 cf       	rjmp	.-320    	; 0x598 <__fp_inf>
 6d8:	aa cf       	rjmp	.-172    	; 0x62e <__fp_szero>
 6da:	5f 3f       	cpi	r21, 0xFF	; 255
 6dc:	ec f3       	brlt	.-6      	; 0x6d8 <__mulsf3_pse+0x82>
 6de:	98 3e       	cpi	r25, 0xE8	; 232
 6e0:	dc f3       	brlt	.-10     	; 0x6d8 <__mulsf3_pse+0x82>
 6e2:	86 95       	lsr	r24
 6e4:	77 95       	ror	r23
 6e6:	67 95       	ror	r22
 6e8:	b7 95       	ror	r27
 6ea:	f7 95       	ror	r31
 6ec:	e7 95       	ror	r30
 6ee:	9f 5f       	subi	r25, 0xFF	; 255
 6f0:	c1 f7       	brne	.-16     	; 0x6e2 <__mulsf3_pse+0x8c>
 6f2:	fe 2b       	or	r31, r30
 6f4:	88 0f       	add	r24, r24
 6f6:	91 1d       	adc	r25, r1
 6f8:	96 95       	lsr	r25
 6fa:	87 95       	ror	r24
 6fc:	97 f9       	bld	r25, 7
 6fe:	08 95       	ret

00000700 <__divmodhi4>:
 700:	97 fb       	bst	r25, 7
 702:	09 2e       	mov	r0, r25
 704:	07 26       	eor	r0, r23
 706:	0a d0       	rcall	.+20     	; 0x71c <__divmodhi4_neg1>
 708:	77 fd       	sbrc	r23, 7
 70a:	04 d0       	rcall	.+8      	; 0x714 <__divmodhi4_neg2>
 70c:	0c d0       	rcall	.+24     	; 0x726 <__udivmodhi4>
 70e:	06 d0       	rcall	.+12     	; 0x71c <__divmodhi4_neg1>
 710:	00 20       	and	r0, r0
 712:	1a f4       	brpl	.+6      	; 0x71a <__divmodhi4_exit>

00000714 <__divmodhi4_neg2>:
 714:	70 95       	com	r23
 716:	61 95       	neg	r22
 718:	7f 4f       	sbci	r23, 0xFF	; 255

0000071a <__divmodhi4_exit>:
 71a:	08 95       	ret

0000071c <__divmodhi4_neg1>:
 71c:	f6 f7       	brtc	.-4      	; 0x71a <__divmodhi4_exit>
 71e:	90 95       	com	r25
 720:	81 95       	neg	r24
 722:	9f 4f       	sbci	r25, 0xFF	; 255
 724:	08 95       	ret

00000726 <__udivmodhi4>:
 726:	aa 1b       	sub	r26, r26
 728:	bb 1b       	sub	r27, r27
 72a:	51 e1       	ldi	r21, 0x11	; 17
 72c:	07 c0       	rjmp	.+14     	; 0x73c <__udivmodhi4_ep>

0000072e <__udivmodhi4_loop>:
 72e:	aa 1f       	adc	r26, r26
 730:	bb 1f       	adc	r27, r27
 732:	a6 17       	cp	r26, r22
 734:	b7 07       	cpc	r27, r23
 736:	10 f0       	brcs	.+4      	; 0x73c <__udivmodhi4_ep>
 738:	a6 1b       	sub	r26, r22
 73a:	b7 0b       	sbc	r27, r23

0000073c <__udivmodhi4_ep>:
 73c:	88 1f       	adc	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	5a 95       	dec	r21
 742:	a9 f7       	brne	.-22     	; 0x72e <__udivmodhi4_loop>
 744:	80 95       	com	r24
 746:	90 95       	com	r25
 748:	bc 01       	movw	r22, r24
 74a:	cd 01       	movw	r24, r26
 74c:	08 95       	ret

0000074e <_exit>:
 74e:	f8 94       	cli

00000750 <__stop_program>:
 750:	ff cf       	rjmp	.-2      	; 0x750 <__stop_program>
